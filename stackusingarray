class Stack{
	private int top = -1 ;
	int max  = 5 ;
	int stack[] = new int[max] ;
	
	// Stack(){
		// this.max = 5 ;
	// }
	
	// Stack(int max){
		// this.max = max ;
	// }
	
	
	boolean isEmpty(){
		return top == -1 ;
	}
	
	boolean isFull(){
		return top == max-1 ;
	}
	int size(){
		return max ;
	}
	
	void push(int data){
		if(isFull()){
			System.out.println("stack is full, can't push elements") ;	return ;
		}
		
		top++ ;
		stack[top] = data ;
	}
	
	int  pop(){
		if(isEmpty()){
			System.out.println("can't pop in empty stack") ;	return -1;
		}
		int data = stack[top] ;
		top-- ;
		return data ;
	}
	
	int peek(){
		if(isEmpty()){
			System.out.println("stack is empty can't peek") ; return -1 ;
		}
		return stack[top] ;
	}
	
	void print(){
		int temp = top ;
		while(temp != -1){
			System.out.print(stack[temp] + " --> ") ;
			temp-- ;
		}
		System.out.println("null") ;
	}
}

class StackUsingArray{
	public static void main(String [] args){
		Stack mystack = new Stack() ;
		
		mystack.push(45) ;
		mystack.push(34) ;
		mystack.push(23) ;
		mystack.push(15) ;
		mystack.push(65) ;
		mystack.push(99) ;
		
		mystack.print() ;
		
		System.out.println(mystack.pop()) ;
		System.out.println(mystack.pop()) ;
		System.out.println(mystack.pop()) ;
		System.out.println(mystack.pop()) ;
		System.out.println(mystack.pop()) ;
		System.out.println(mystack.pop()) ;
		
		System.out.println("empty = " + mystack.isEmpty()) ;
		System.out.println("full = " + mystack.isFull()) ;                                 
		// System.out.println("size " + mystack.size()) ;
		// System.out.println("array size " + mystack.stack.length) ;
		
		
		
		// System.out.println(mystack.peek()) ;
		
		mystack.print() ;
	}
}
